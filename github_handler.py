# github_handler.py
from github import Github
import os
import git
import shutil
from pathlib import Path
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

MIT_LICENSE_TEXT = """MIT License

Copyright (c) {year} {fullname}

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

CREATION_INFO_TEXT = """
---------------------------------------
This application was created using the AI Code Generator.
For more information and updates, visit: https://codegen.esavibes.com
"""

class GitHubHandler:
    def __init__(self):
        self.token = os.getenv('GITHUB_TOKEN')
        self.username = os.getenv('GITHUB_USERNAME')
        if not self.token or not self.username:
            raise ValueError("GitHub token and username must be set in environment variables")
        self.github = Github(self.token)
        self.user = self.github.get_user()

    def create_repository(self, repo_name: str, project_path: str) -> str:
        """
        Creates a new GitHub repository and pushes local files.

        Args:
            repo_name: Name for the new repository
            project_path: Path to the directory containing the files to push

        Returns:
            str: URL of the created repository
        """
        try:
            # Create the repository on GitHub
            logger.info(f"Creating repository: {repo_name}")
            repo = self.user.create_repo(
                name=repo_name,
                description="Generated by AI App Generator",
                private=False,
                auto_init=False
            )

            # Initialize local git repository
            logger.info("Initializing local git repository")
            repo_dir = Path(project_path)
            git_repo = git.Repo.init(repo_dir)

            # Create .gitignore
            logger.info("Creating .gitignore")
            gitignore_content = """
            __pycache__/
            *.py[cod]
            *$py.class
            .env
            .venv
            env/
            venv/
            ENV/
            *.sqlite
            .DS_Store
            """
            with open(repo_dir / '.gitignore', 'w') as f:
                f.write(gitignore_content.strip())

            # Create MIT License file if it doesn't exist
            license_path = repo_dir / "LICENSE"
            if not license_path.exists():
                logger.info("Creating LICENSE file")
                current_year = datetime.now().year
                license_content = MIT_LICENSE_TEXT.format(year=current_year, fullname=self.username)
                with open(license_path, 'w') as f:
                    f.write(license_content)

            # Create or update README.md with appended creation info
            readme_path = repo_dir / "README.md"
            if readme_path.exists():
                logger.info("Appending creation info to existing README.md")
                with open(readme_path, 'a') as f:
                    f.write("\n" + CREATION_INFO_TEXT)
            else:
                logger.info("Creating README.md file")
                readme_content = f"# {repo_name}\n\nThis project was generated by the AI Code Generator.\n{CREATION_INFO_TEXT}"
                with open(readme_path, 'w') as f:
                    f.write(readme_content)

            # Add all files and create initial commit
            logger.info("Creating initial commit")
            git_repo.git.add(A=True)
            git_repo.index.commit("Initial commit: AI generated project")

            # Add remote and push
            logger.info("Pushing to GitHub")
            origin = git_repo.create_remote(
                'origin',
                f'https://{self.token}@github.com/{self.username}/{repo_name}.git'
            )

            origin.push('master')

            # Clean up: remove .git directory to prevent conflicts with future generations
            logger.info("Cleaning up git directory")
            shutil.rmtree(repo_dir / '.git')

            return repo.html_url

        except Exception as e:
            logger.error(f"Error creating repository: {str(e)}")
            # If repository was created but later steps failed, attempt to delete it
            try:
                repo = self.github.get_repo(f"{self.username}/{repo_name}")
                repo.delete()
            except:
                pass
            raise

    def update_repository(self, repo_name: str, project_path: str) -> bool:
        """
        Updates an existing repository with new files.

        Args:
            repo_name: Name of the existing repository
            project_path: Path to the directory containing the new files

        Returns:
            bool: True if successful, False otherwise
        """
        try:
            repo = self.github.get_repo(f"{self.username}/{repo_name}")
            repo_dir = Path(project_path)

            # Clone existing repository
            git.Repo.clone_from(
                f'https://{self.token}@github.com/{self.username}/{repo_name}.git',
                repo_dir
            )

            # Update LICENSE file if missing
            license_path = repo_dir / "LICENSE"
            if not license_path.exists():
                current_year = datetime.now().year
                license_content = MIT_LICENSE_TEXT.format(year=current_year, fullname=self.username)
                with open(license_path, 'w') as f:
                    f.write(license_content)

            # Update README.md with appended creation info
            readme_path = repo_dir / "README.md"
            if readme_path.exists():
                with open(readme_path, 'a') as f:
                    f.write("\n" + CREATION_INFO_TEXT)
            else:
                readme_content = f"# {repo_name}\n\nThis project was generated by the AI Code Generator.\n{CREATION_INFO_TEXT}"
                with open(readme_path, 'w') as f:
                    f.write(readme_content)

            # Add new files
            git_repo = git.Repo(repo_dir)
            git_repo.git.add(A=True)

            if git_repo.index.diff('HEAD'):
                git_repo.index.commit("Update: AI generated changes")
                origin = git_repo.remote('origin')
                origin.push()

            shutil.rmtree(repo_dir / '.git')
            return True

        except Exception as e:
            logger.error(f"Error updating repository: {str(e)}")
            return False

    def delete_repository(self, repo_name: str) -> bool:
        """
        Deletes a repository.

        Args:
            repo_name: Name of the repository to delete

        Returns:
            bool: True if successful, False otherwise
        """
        try:
            repo = self.github.get_repo(f"{self.username}/{repo_name}")
            repo.delete()
            return True
        except Exception as e:
            logger.error(f"Error deleting repository: {str(e)}")
            return False

    def get_repository_info(self, repo_name: str) -> dict:
        """
        Gets information about a repository.

        Args:
            repo_name: Name of the repository

        Returns:
            dict: Repository information including URL, stars, etc.
        """
        try:
            repo = self.github.get_repo(f"{self.username}/{repo_name}")
            return {
                'name': repo.name,
                'url': repo.html_url,
                'stars': repo.stargazers_count,
                'description': repo.description,
                'created_at': repo.created_at,
                'updated_at': repo.updated_at
            }
        except Exception as e:
            logger.error(f"Error getting repository info: {str(e)}")
            return None

    def get_all_repositories(self, page=1, per_page=6, sort='created', direction='desc'):
        """
        Fetches all repositories for the authenticated user with pagination.

        Args:
            page (int): Page number for pagination (default: 1)
            per_page (int): Number of repositories per page (default: 6)
            sort (str): Sort criteria ('created', 'updated', 'pushed', 'full_name')
            direction (str): Sort direction ('asc' or 'desc')

        Returns:
            list: List of repository information dictionaries
        """
        try:
            repos = self.user.get_repos(
                type='owner',
                sort=sort,
                direction=direction
            )

            # Calculate pagination
            start_idx = (page - 1) * per_page
            end_idx = start_idx + per_page

            repo_list = []
            for idx, repo in enumerate(repos):
                if idx >= start_idx and idx < end_idx:
                    repo_list.append({
                        'repo_name': repo.name,
                        'repo_url': repo.html_url,
                        'repo_timestamp': repo.created_at.strftime('%B %d, %Y'),
                        'repo_id': repo.id,
                        'link_preview': {
                            'title': repo.full_name,
                            'description': repo.description or "No description available.",
                            'image': f"https://opengraph.githubassets.com/1/{repo.full_name}",
                            'stars': repo.stargazers_count,
                            'language': repo.language,
                            'forks': repo.forks_count
                        }
                    })
                elif idx >= end_idx:
                    break

            total_repos = repos.totalCount
            total_pages = (total_repos + per_page - 1) // per_page

            return {
                'repositories': repo_list,
                'total_pages': total_pages,
                'current_page': page
            }

        except Exception as e:
            logger.error(f"Error fetching repositories: {str(e)}")
            return None
